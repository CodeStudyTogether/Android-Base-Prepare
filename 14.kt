Linux的进程空间是相互隔离的。

Linux将内存空间在逻辑上划分为内核空间与用户空间。Linux 操作系统和驱动程序运行在内核空间，应用程序运行在用户空间，为了保证内核安全，它们是隔离的。内核空间可以访问所有内存空间，而用户空间不能访问内核空间。

Binder是Android上的一种进程间通信机制，它基于Client-Server模式实现，由BinderDriver、ServiceManager、Client和Server四个模块组成。

事件分发 https://juejin.im/post/5c87ed5a5188257e937dda58
Android的事件分发主要有这几个角色：Activity、Window、ViewGroup和View。当Activity接收到事件时，会将事件传递给Window，然后Window将事件传递给顶层容器DecorView(继承自FrameLayout)，事件分发由此开始。

首先先明确几个概念：
同一事件序列： 由一个DOWN事件，若干个MOVE事件，一个UP事件组成
新的一个事件序列开始前会重置所有的点击状态

当Activity接收到事件时，Activity的dispatchTouchEvent方法会被调用。

Activity收到事件后将事件交由Windows处理

Window会将事件交由DecorView处理

事件传递给了ViewGroup，View事件分发由此开始。

首先分析DOWN事件，当我们触摸手机屏幕的一瞬间，Activity接收到DOWN事件，事件由Activity传递到Window，再到DecorView。当DecorView接收到事件，会调用ViewGroup的dispatchTouchEvent方法。

由于是DOWN事件传递到ViewGroup，在dispatchTouchEvent方法中首先会重置触摸状态，包括清除保存处理事件View的单链表,因此每次DOWN事件代表一个新的事件序列的开始

由于是DOWN事件，则先会去判断当前容器是否禁止拦截事件。默认情况下，父容器可以拦截事件，此时会调用onInterceptTouchEvent方法，该方法默认返回false;若父容器被禁止拦截事件，则不会调用onInterceptTouchEvent方法。

这里先看默认情况，事件没有被父容器拦截，即intercepted为false。此时会去遍历该ViewGroup的子View,寻找发生DOWN事件的View。若找到发生DOWN事件的View,将事件分发给对应的子View,若View能够处理事件，也就是子View的dispatchTouchEvent方法返回true,则将该处理事件的View加入mFirstTouchTarget这个链表中，并标记当前DOWN事件已被处理。

若没有找到能够处理事件的子View,此时事件会交给当前ViewGroup来处理。没有找到处理DOWN事件的子View,也就是mFirstTouchTarget这个链表没有被赋值，此时为null。此时通过dispatchTransformedTouchEvent将事件传递给当前ViewGroup的父类，调用View的dispatchTouchEvent方法进行事件处理。

事件到了View的dispatchTouchEvent方法，先会去判断事件是否由OnTouchListener消费掉并且View是否可用，若OnTouchListener返回true且View处于可用状态，则表示该DOWN事件被消费掉，该DOWN事件处理结束；若事件未被OnTouchListener消费掉或者View处于不可用状态，则将事件交由View的onTouchEvent方法。

若此时intercepted值未true(当onInterceptToucnEvent方法返回true)。此时不会去寻找处理事件的子View，也就是mFirstTouchTarget为null，同样事件会交由ViewGroup父类的dispatchTouchEvent方法处理。

DOWN事件
Activity接收DOWN事件后，将事件传递给Window，Window将事件分发给ViewGroup
ViewGroup接收到DOWN事件，默认情况下ViewGroup会遍历所有子View,寻找发生触摸事件的子View,若找到子View且子View消费了DOWN事件，则ViewGroup会保存该处理事件的子View。
若ViewGroup拦截了事件，事件交由ViewGroup自己去处理，此时会调用ViewGroup父类的dispatchTouchEvent方法。在View处理事件时，若View可用并且OnTouchListener处理了事件，则DOWN事件被消费，DOWN事件分发结束；反之，则交由onTouchEvent方法处理DOWN事件
事件传递到了View的onTouchEvent方法中，只要View可点击或者长按，则事件一定被消费，反之，ViewGroup没有处理事件，事件交由父容器处理。

当手机抬起屏幕的一瞬间，Activity会接收到UP事件，Activity将UP事件传递给Window，Window将事件传递给DecorView，DecorView父类ViewGroup的dispatchTouchEvent方法被调用。
