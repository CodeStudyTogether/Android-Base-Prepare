https://juejin.im/post/5bc406b9f265da0aa664ea1e

而当我们通过代码，将这张图片加载进内存时，会先解析图片文件本身的数据格式，然后还原为位图，也就是 Bitmap 对象，Bitmap 的大小取决于像素点的数据格式以及分辨率两者了。

所以，**一张 png 或者 jpg 格式的图片大小，跟这张图片加载进内存所占用的大小完全是两回事。**你不能说，我 jpg 图片也就 10KB，那它就只占用 10KB 的内存空间，这是不对的。

网上很多文章都会介绍说，计算一张图片占用的内存大小公式：分辨率 * 每个像素点的大小。

图片的不同格式：png 或者 jpg 对于图片所占用的内存大小其实并没有影响

这张图片的大小按照这个公式应该是：1080 * 452 * 4B = 1952640B ≈ 1.86MB
ps: 这里像素点大小以 4B 来计算是因为，当没有特别指定时，系统默认为 ARGB_8888 作为像素点的数据格式，其他的格式如下：

ALPHA_8 -- (1B)
RGB_565 -- (2B)
ARGB_4444 -- (2B)
ARGB_8888 -- (4B)
RGBA_F16 -- (8B)

将 ARGB_8888 换成 RGB_565 格式，但后者不支持透明度，所以此方案并不通用，取决于你 app 中图片的透明度需求，当然也可以缓存 ARGB_4444，但会降低质量。

一张图片占用的内存大小的计算公式：分辨率 * 像素点大小；但分辨率不一定是原图的分辨率，需要结合一些场景来讨论，像素点大小就几种情况：ARGB_8888(4B)、RGB_565(2B) 等等。
如果不对图片进行优化处理，如压缩、裁剪之类的操作，那么 Android 系统会根据图片的不同来源决定是否需要对原图的分辨率进行转换后再加载进内存。
图片来源是 res 内的不同资源目录时，系统会根据设备当前的 dpi 值以及资源目录所对应的 dpi 值，做一次分辨率转换，规则如下：新分辨率 = 原图横向分辨率 * (设备的 dpi / 目录对应的 dpi ) * 原图纵向分辨率 * (设备的 dpi / 目录对应的 dpi )。
其他图片的来源，如磁盘，文件，流等，均按照原图的分辨率来进行计算图片的内存大小。
jpg、png 只是图片的容器，图片文件本身的大小与它所占用的内存大小没有什么关系。
基于以上理论，以下场景的出现是合理的：
同个 app，在不同 dpi 设备中，同个界面的相同图片所占的内存大小有可能不一样。
同个 app，同一张图片，但图片放于不同的 res 内的资源目录里时，所占的内存大小有可能不一样。
以上场景之所说有可能，是因为，一旦使用某个热门的图片开源库，那么，以上理论基本就不适用了。
因为系统支持对图片进行优化处理，允许先将图片压缩，降低分辨率后再加载进内存，以达到降低占用内存大小的目的
而热门的开源图片库，内部基本都会有一些图片的优化处理操作：
当使用 fresco 时，不管图片来源是哪里，即使是 res，图片占用的内存大小仍旧以原图的分辨率计算。
当使用 Glide 时，如果有设置图片显示的控件，那么会自动按照控件的大小，降低图片的分辨率加载。图片来源是 res 的分辨率转换规则对它也无效。
